trigger:
  branches:
    include:
    - master
  paths:
    include:
    - arm/
    - azure-pipelines/
    - src/

name: $(Date:yyyyMMdd)$(Rev:.r).$(Build.SourceBranch)

parameters:
- name: overrideDeploy
  displayName: Trigger deploy if not on master branch?
  type: boolean
  default: false

variables:
- template: variables.yml
- name: shouldDeploy
  value: >-
    $[or(
      eq(variables['isMasterMerge'], 'True'),
      ${{ parameters.overrideDeploy }}
    )]

stages:
- stage: build
  displayName: Build
  jobs:
  - job: build
    displayName: Build ASP.NET Core App 3.1
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build $(buildConfiguration)
      inputs:
        command: build
        projects: $(solutionPath)
        arguments: --configuration $(buildConfiguration)

    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests and Code Coverage
      inputs:
        command: test
        arguments: --configuration $(buildConfiguration) --settings coverlet.runsettings.xml

    - task: DotNetCoreCLI@2
      displayName: Install ReportGenerator Tool
      inputs:
        command: custom
        custom: tool
        arguments: install --tool-path . dotnet-reportgenerator-globaltool

    - script: |
        ./reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura
      displayName: Create Code Coverage Report

    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage Report
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml

    - task: DotNetCoreCLI@2
      displayName: Publish Web App
      inputs:
        command: publish
        projects: $(webAppProjectPath)
        arguments: --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)

    - task: CopyFiles@2
      displayName: Copy ARM template to ArtifactStagingDirectory
      inputs:
        sourceFolder: arm
        contents: '*'
        targetFolder: $(Build.ArtifactStagingDirectory)/arm

    - task: PublishBuildArtifacts@1
      displayName: Publish Build Artifacts
      condition: and(succeeded(), eq(variables['shouldDeploy'], 'True'))
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: $(artifactName)

    - script: |
        pwd
        printenv | sort
        ls -R $(Pipeline.Workspace)
      displayName: Debug script
      condition: always()

- stage: deploy
  displayName: Deploy
  condition: and(succeeded(), eq(variables['shouldDeploy'], 'True'))
  jobs:
  - deployment: deploy
    displayName: Deploy ASP.NET Core App 3.1
    environment: $(environmentName)
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureResourceGroupDeployment@2
            displayName: Azure Deployment
            inputs:
              azureSubscription: $(azureSubscriptionServiceConnectionName)
              resourceGroupName: $(resourceGroupName)
              location: $(location)
              csmFile: $(Pipeline.Workspace)/$(artifactName)/$(armTemplateFileArtifactPath)
              overrideParameters: -name $(armTemplateParameterName)
              deploymentMode: Complete
              deploymentName: $(deploymentName)
              deploymentOutputs: ArmDeploymentOutput

          - pwsh: |
              $output = ConvertFrom-Json '$(ArmDeploymentOutput)' -Depth 10

              $WebAppName  = $output.result.value.WebAppName

              Write-Host "##vso[task.setvariable variable=WEB_APP_NAME]$WebAppName"
            failOnStderr: true
            displayName: Create variables from ARM deployment outputs

          - task: AzureRmWebAppDeployment@4
            displayName: Azure App Service Deploy
            inputs:
              azureSubscription: $(azureSubscriptionServiceConnectionName)
              resourceGroupName: $(resourceGroupName)
              webAppName: $(WEB_APP_NAME)
              webAppKind: webAppLinux
              packageForLinux: $(Pipeline.Workspace)/$(artifactName)/$(webAppProjectName).zip

          - script: |
              echo $(ArmDeploymentOutput)
              pwd
              printenv | sort
              ls -R $(Pipeline.Workspace)
            displayName: Debug script
            condition: always()
